// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String?
  email               String   @unique
  hashedPassword      String   @default("")
  salt                String   @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  bookings            Booking[]
  attendances         Attendance[]
  exceptionRequests   ExceptionRequest[]
  overtimeAttendances  OvertimeAttendance[]

  selectedMeetingRoomId Int? 
  selectedMeetingRoom   MeetingRoom? @relation("UserSelectedMeetingRoom", fields: [selectedMeetingRoomId], references: [id])
}

model Booking {
  id            Int          @id @default(autoincrement())
  title         String
  notes         String?
  startTime     DateTime
  endTime       DateTime
  userId        Int
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetingRoomId Int?
  meetingRoom   MeetingRoom? @relation(fields: [meetingRoomId], references: [id])
  createdAt     DateTime     @default(now())
}

model MeetingRoom {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  bookings    Booking[]
  users       User[]    @relation("UserSelectedMeetingRoom")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  clockIn   DateTime?
  clockOut  DateTime?
  duration  String?
  status    String
  location  String?
  breaks    AttendanceBreak[]
}

model AttendanceBreak {
  id           Int        @id @default(autoincrement())
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  attendanceId Int
  breakIn      DateTime
  breakOut     DateTime?
  duration     String?
}

model OvertimeAttendance {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  clockIn   DateTime?
  clockOut  DateTime?
  duration  String?
  breaks    OvertimeBreak[]
}

model OvertimeBreak {
  id           Int        @id @default(autoincrement())
  overtime     OvertimeAttendance @relation(fields: [overtimeId], references: [id], onDelete: Cascade)
  overtimeId   Int
  breakIn      DateTime
  breakOut     DateTime?
  duration     String?
}

model ExceptionRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  reason    String
  date      DateTime
  status    String
  createdAt DateTime @default(now())
}

model OfficeHours {
  id        Int      @id @default(autoincrement())
  startTime String   // e.g. "09:00"
  endTime   String   // e.g. "18:00"
  updatedAt DateTime @updatedAt
}
